# Default values for inventree.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
globals:
  inventree: ""
  persistence:
    storageClass: ""

replicaCount: 1

image:
  repository: inventree/inventree
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: stable

imagePullSecrets: []
nameOverride: ""
fullnameOverride: itree

web:
  port: ""
  address: ""

secretKey:
  enabled: false
  existingSecret: ""
  customSecret: ""

config:
  enableConfigMap: true
  existingConfigMap: ""
  debug: false
  logLevel: INFO
  language: en-us
  timezone: UTC
  base_currency: USD
  currencies: 
    - USD
  admin:
    enabled: true
    user: admin
    email: info@example.com
    password: inventree
  directories:
    staticRoot: ""
    mediaRoot: ""
    homeDir: ""
    dataDir: ""
    pluginDir: ""
  files:
    config: ""
    secretKey: ""
    plugins: ""
  plugins:
    enabled: false
  ## @param config.database
  ##
  database:
    ## @param config.database.engine 
    ## @options mysql, postgresql, sqlite3
    ##
    engine: ""
    ## @param config.database.host Points to the dns or ip address of the database server.
    ##
    host: db.inventree2.svc.cluster.local
    ## @param config.database.name Name of the database to be used.
    ##
    name: ""
    user: ""
    password: ""
    ## @param config.database.port Port to access the database.
    ##
    port: ""
  ## Email backend configuration
  ## @ref https://docs.djangoproject.com/en/dev/topics/email/
  ##
  email:
    backend: ""
    host: ""
    port: ""
    username: ""
    password: ""
    sender: ""
    tls: false
    ssl: false
  allowedHosts:
    - "*"
  cors:
    allowAll: True
    whitelist: {}
  sentry:
    enabled: False
    sampleRate: ""
    dns: ""
  background:
    workers: 4
    timeout: 90
  extraUrlSchemes: {}
  login:
    confirmDays: 3
    attempts: 5
  remote:
    enabled: False
    header: REMOTE_USER
  auth: {}
  middleware: {}
  social: {}
  customize: {}

init:
  enabled: False
  existingInit: ""
  subpath: ""
  initOverride: ""

workers:
  enabled: true



serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: inventree.app.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

persistence:
  data:
    enabled: true
    mountPath: "/home/inventree/data"
    storageClass: longhorn
    accessModes: 
      - ReadWriteOnce
    accessMode: ReadWriteOnce
    ## @param persistence.data.size Persistent Volume size
    ##
    size: 1Gi
    dataSource: {}
    existingClaim: ""
    ## @param persistence.data.selector Selector to match an existing Persistent Volume for WordPress data PVC
    ## If set, the PVC can't have a PV dynamically provisioned for it
    ## E.g.
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    ##
    selector: {}
    ## @param persistence.data.annotations Persistent Volume Claim annotations
    ##
    annotations: {}


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: false
  existingSecret: ""
  postgresUser: pguser
  postgresPassword: pgpassword
  postgresAdminPassword: postgres
  persistance:
    enabled: false
    size: ""
    storageClass: ""

redis:
  enabled: false
  existingSecret: ""
  redisUser: ""

proxy:
  enabled: false
