{{- /*
Copyright VMware, Inc.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if .Values.proxy.enabled }}
{{- if or (not .Values.proxy.existingServerBlockConfigmap) (eq .Values.proxy.existingServerBlockConfigmap "inventree-proxy-prod-conf") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: inventree-proxy-prod-conf
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.proxy.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: proxy
    app.kubernetes.io/component: conf-configmap
  {{- if .Values.proxy.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.proxy.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  default.conf: |
    server {

        # Listen for connection on (internal) port 80
        # If you are exposing this server to the internet, you should use HTTPS!
        # In which case, you should also set up a redirect from HTTP to HTTPS, and listen on port 443
        # See the Nginx documentation for more details
        listen 8080;

        {{- if .Values.proxy.dnsResolver }}
        resolver {{ .Values.proxy.dnsResolver }};
        {{- end  }}

        real_ip_header proxy_protocol;

        set $upstream_proto http;
        set $upstream_app {{ include "inventree.names.master.fullname" .}}.inventree.svc.cluster.local;
        set $upstream_port {{ .Values.master.service.ports.http }};


        ## Resolver is required when using variables https://stackoverflow.com/questions/71204607/why-does-a-variable-not-work-in-nginx-proxy-pass
        ## Currently applied in helm chart proxy.dnsResolver
        # resolver 10.152.183.10 valid=10s;

        location / {

            proxy_set_header      Host              $http_host;
            proxy_set_header      X-Forwarded-By    $server_addr:$server_port;
            proxy_set_header      X-Forwarded-For   $remote_addr;
            proxy_set_header      X-Forwarded-Proto $scheme;
            proxy_set_header      X-Real-IP         $remote_addr;
            proxy_set_header      CLIENT_IP         $remote_addr;

            proxy_pass_request_headers on;

            proxy_redirect off;

            client_max_body_size 100M;

            proxy_buffering off;
            proxy_request_buffering off;

            # Do not touch this unless you have a specific reason - this and the docker-compose need to match
            proxy_pass $upstream_proto://$upstream_app:$upstream_port;
            
        }

        # Redirect any requests for static files
        location /static/ {
            alias /var/www/static/;
            autoindex on;

            # Caching settings
            expires 30d;
            add_header Pragma public;
            add_header Cache-Control "public";
        }

        # Redirect any requests for media files
        location /media/ {
            alias /var/www/media/;

            # Media files require user authentication
            auth_request /auth;

            # Content header to force download
            add_header Content-disposition "attachment";
        }

        # Use the 'user' API endpoint for auth
        location /auth {
            internal;

            proxy_pass $upstream_proto://$upstream_app:$upstream_port;

            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

    }
{{- end }}
{{- end }}